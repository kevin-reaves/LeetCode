#!/usr/bin/python

"""
Given an array where elements are sorted in ascending order, convert
it to a height balanced BST.
"""

#Definition for a  binary tree node
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution:
    def sortedArrayToBST(self, num):
        if not num:
            return None

        # Sorted list is broken in half recursively
        mid = len(num) // 2

        root = TreeNode(num[mid])
        root.left = self.sortedArrayToBST(num[:mid])
        root.right = self.sortedArrayToBST(num[mid+1:])

        return root

    # inorder isn't part of the leetcode problem, for testing purposes only
    def inorder(self, node):
        # prints in numerical order
        if node is not None:
            # Checks left and right nodes, if they don't exist they won't be
            # printed
            self.inorder(node.left)
            print node.val
            self.inorder(node.right)



solution = Solution()
solutionRoot = solution.sortedArrayToBST([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
solution.inorder(solutionRoot)