#!/usr/bin/python
"""
Python 3 LeetCode Problem 461, Hamming Distance
The Hamming distance between two integers is the number of positions at
which the corresponding bits are different.

Input: x = 1, y = 4

Output: 2

Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ^   ^

The above arrows point to positions where the corresponding bits are different.
"""

class Solution:
    def hammingDistance(self, x, y):
        newX = str(format(x, '08b'))
        newY = str(format(y, '08b'))

        """If the binary length of X and Y don't match, append zeroes to the
           beginning of the smaller value until they do match 
        """

        if len(newX) > len(newY):
            bitFix = len(newX) - len(newY)
            bitFix = '0' * bitFix
            newY = bitFix + newY

        elif len(newY) > len(newX):
            bitFix = len(newY) - len(newX)
            bitFix = '0' * bitFix
            newX = bitFix + newX


        #print(newX, " is the binary representation of x ", x)
        #print(newY, " is the binary representation of y ", y)

        distance = 0

        try:
            for count in range(len(newX)):
                if newX[count] != newY[count]:
                    distance += 1
        except IndexError:
            distance += 1

        return distance


solution = Solution()
print(solution.hammingDistance(680142203, 1111953568))