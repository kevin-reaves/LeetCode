#!/usr/bin/python
"""
Given an array of integers, every element appears twice except for one.
 Find that single one.

Note:
Your algorithm should have a linear runtime complexity.
Could you implement it without using extra memory?
"""

class Solution:

    #Failed on time complexity for the first two solutions, ended up looking
    #this up online. n ^ n = 0, so we can use the trailing index here to
    #cancel out all the duplicate numbers

    # 7 ^ 7 ^ 6 returns 6, 6 is the non duplicate in this set of numbers
    def singleNumber(self, nums):

        xor = nums[0]

        for i in range(1, len(nums)):
            xor = xor ^ nums[i]
        return xor


        #Second attempt, also failed time constraint
        # while nums:
        #     n = nums.pop()
        #     if n in nums:
        #         nums.remove(n)
        #     else:
        #         return n

        #First attempt, failed time constraint
        # myNums = []
        #
        # for num in nums:
        #     if num not in myNums:
        #         myNums.append(num)
        #     else:
        #         myNums.remove(num)
        # return myNums[0]

solution = Solution()
print(solution.singleNumber([17,12,5,-6,12,4,17,-5,2,-3,2,4,5,16,-3,-4,15,15,-4,-5,-6]))