#!/usr/bin/python

"""
Given two binary trees and imagine that when you put one of them to cover the
other, some nodes of the two trees are overlapped while the others are not.

You need to merge them into a new binary tree. The merge rule is that if two
nodes overlap, then sum node values up as the new value of the merged node.
Otherwise, the NOT null node will be used as the node of new tree.

Input:
	Tree 1                     Tree 2
          1                         2
         / \                       / \
        3   2                     1   3
       /                           \   \
      5                             4   7
Output:
Merged tree:
	     3
	    / \
	   4   5
	  / \   \
	 5   4   7

Note: The merging process must start from the root nodes of both trees.
"""

#Definition for a  binary tree node, not part of leetcode problem
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution:
    def mergeTrees(self, t1, t2):
        if t1 is None and t2 is None:
            return None
        if t1 is None:
            return t2
        if t2 is None:
            return t1

        t1.val += t2.val

        t1.left = self.mergeTrees(t1.left, t2.left)
        t1.right = self.mergeTrees(t1.right, t2.right)

        return t1

    #From leetcode 108, not part of this problem. For testing only
    def sortedArrayToBST(self, num):
        if not num:
            return None

        # Sorted list is broken in half recursively
        mid = len(num) // 2

        root = TreeNode(num[mid])
        root.left = self.sortedArrayToBST(num[:mid])
        root.right = self.sortedArrayToBST(num[mid+1:])

        return root

    # inorder isn't part of the leetcode problem, for testing purposes only
    def inorder(self, node):
        # prints in numerical order
        if node is not None:
            # Checks left and right nodes, if they don't exist they won't be
            # printed
            self.inorder(node.left)
            print node.val
            self.inorder(node.right)

solution = Solution()
t1 = solution.sortedArrayToBST([1, 3, 5, 7, 9])
t2 = solution.sortedArrayToBST([2, 4, 6, 8, 10])

solution.inorder(t1)
print("\n")
solution.inorder(t2)
print("\n")

solution.mergeTrees(t1, t2)
solution.inorder(t1)

